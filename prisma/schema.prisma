// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PATIENT
  DOCTOR
  NURSE
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  APPOINTMENT_CONFIRMATION
  APPOINTMENT_REMINDER
  APPOINTMENT_CANCELLATION
  PRESCRIPTION_READY
  PAYMENT_CONFIRMATION
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  password      String
  role          UserRole
  firstName     String
  lastName      String
  phone         String?
  dateOfBirth   DateTime?
  address       String?
  profileImage  String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Role-specific data
  patient       Patient?
  doctor        Doctor?
  nurse         Nurse?
  admin         Admin?

  // Notifications
  notifications Notification[]

  // Sessions
  sessions      Session[]
  
  @@map("users")
}

model Patient {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @unique @db.ObjectId
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  emergencyContact String?
  bloodType       String?
  allergies       String[]
  medicalHistory  String?
  insurance       String?
  insuranceNumber String?
  
  appointments    Appointment[]
  prescriptions   Prescription[]
  medicalRecords  MedicalRecord[]
  payments        Payment[]
  reviews         Review[]
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@map("patients")
}

model Doctor {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @unique @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  licenseNumber   String   @unique
  specialties     String[]
  qualification   String
  experience      Int      // in years
  consultationFee Float
  biography       String?
  languages       String[]
  
  schedules       DoctorSchedule[]
  appointments    Appointment[]
  prescriptions   Prescription[]
  medicalRecords  MedicalRecord[]
  reviews         Review[]
  
  isAvailable     Boolean  @default(true)
  rating          Float    @default(0)
  totalReviews    Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("doctors")
}

model Nurse {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  licenseNumber String   @unique
  department    String
  shift         String   // morning, afternoon, night
  
  assignments   NurseAssignment[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("nurses")
}

model Admin {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  permissions String[] // list of permissions
  department  String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("admins")
}

model Specialty {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  icon        String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("specialties")
}

model DoctorSchedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  doctorId  String   @db.ObjectId
  doctor    Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  dayOfWeek Int      // 0-6 (Sunday-Saturday)
  startTime String   // HH:mm format
  endTime   String   // HH:mm format
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("doctor_schedules")
}

model Appointment {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  patientId   String            @db.ObjectId
  patient     Patient           @relation(fields: [patientId], references: [id])
  doctorId    String            @db.ObjectId
  doctor      Doctor            @relation(fields: [doctorId], references: [id])
  
  appointmentDate DateTime
  startTime       String        // HH:mm format
  endTime         String        // HH:mm format
  status          AppointmentStatus @default(SCHEDULED)
  type            String        // consultation, follow-up, emergency, telemedicine
  
  reason          String?
  notes           String?
  symptoms        String[]
  
  // Payment info
  consultationFee Float
  payment         Payment?
  
  // Video consultation
  meetingLink     String?
  meetingId       String?
  
  // Nurse assignment
  nurseAssignment NurseAssignment?
  
  // Medical records
  medicalRecord   MedicalRecord?
  prescription    Prescription?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("appointments")
}

model NurseAssignment {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  nurseId       String      @db.ObjectId
  nurse         Nurse       @relation(fields: [nurseId], references: [id])
  appointmentId String      @unique @db.ObjectId
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  
  patientArrived Boolean     @default(false)
  arrivalTime    DateTime?
  vitals         Json?       // blood pressure, temperature, weight, etc.
  notes          String?
  
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  @@map("nurse_assignments")
}

model MedicalRecord {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String      @db.ObjectId
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      String      @db.ObjectId
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  appointmentId String?     @unique @db.ObjectId
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  
  diagnosis     String
  symptoms      String[]
  treatment     String
  notes         String?
  attachments   String[]    // file URLs
  
  followUpDate  DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("medical_records")
}

model Prescription {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String      @db.ObjectId
  patient       Patient     @relation(fields: [patientId], references: [id])
  doctorId      String      @db.ObjectId
  doctor        Doctor      @relation(fields: [doctorId], references: [id])
  appointmentId String?     @unique @db.ObjectId
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  
  medications   Json[]      // {name, dosage, frequency, duration, instructions}
  instructions  String?
  
  issuedDate    DateTime    @default(now())
  validUntil    DateTime?
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("prescriptions")
}

model Payment {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  patientId     String        @db.ObjectId
  patient       Patient       @relation(fields: [patientId], references: [id])
  appointmentId String        @unique @db.ObjectId
  appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  
  amount        Float
  currency      String        @default("USD")
  status        PaymentStatus @default(PENDING)
  paymentMethod String        // card, cash, insurance
  
  stripePaymentIntentId String?
  transactionId         String?
  
  paidAt        DateTime?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  @@map("payments")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  patientId String   @db.ObjectId
  patient   Patient  @relation(fields: [patientId], references: [id])
  doctorId  String   @db.ObjectId
  doctor    Doctor   @relation(fields: [doctorId], references: [id])
  
  rating    Float    // 1-5
  comment   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("reviews")
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  
  type      NotificationType
  title     String
  message   String
  
  isRead    Boolean          @default(false)
  isEmail   Boolean          @default(false)
  isSMS     Boolean          @default(false)
  
  metadata  Json?            // additional data
  
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  @@map("notifications")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("sessions")
}

model SystemSettings {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  key                 String   @unique
  value               String
  description         String?
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("system_settings")
}

model AuditLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?  @db.ObjectId
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}
